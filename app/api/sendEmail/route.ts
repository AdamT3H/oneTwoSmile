import { NextRequest } from 'next/server';
import nodemailer from 'nodemailer';

interface PaymentBody {
  amount: number;
  productName: string[];
  productCount: number[];
  productPrice: number[];
  clientEmail: string;
}

export async function POST(req: NextRequest) {
    try {
      const body: PaymentBody = await req.json();
      console.log("üì® –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ email:", body);
  
      const { amount, productName, productCount, productPrice, clientEmail } = body;
  
      if (!clientEmail) {
        console.error("‚ùå –ù–µ–º–∞—î clientEmail!");
        return new Response("Missing clientEmail", { status: 400 });
      }
  
      const productList = productName.map((name, index) => {
        const count = productCount[index];
        const price = productPrice[index];
        return `<li><b>${name}</b>: ${count} x ‚Ç¥${price}</li>`;
      }).join('');
  
      const htmlBody = `
        <h2>–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h2>
        <p>–í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏:</p>
        <ul>
          ${productList}
        </ul>
        <p><strong>–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ‚Ç¥${amount}</p>
        <p>–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!</p>
      `;
  
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: "itstepmerch@gmail.com",
          pass: "qhsb jomd wubz jadw", // App Password
        },
      });
  
      const result = await transporter.sendMail({
        from: `"Step Merch" <itstepmerch@gmail.com>`,
        to: clientEmail,
        subject: '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ',
        html: htmlBody,
      });
  
      console.log("‚úÖ –õ–∏—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:", result);
  
      return new Response(JSON.stringify({ success: true }), { status: 200 });
    } catch (error) {
      console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –í–ù–£–¢–†–Ü–®–ù–Ø –í /send-email:", error);
      return new Response("Internal Server Error", { status: 500 });
    }
  }
  